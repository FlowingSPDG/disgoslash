// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package disgoslash

import (
	io "io"

	discord "github.com/wafer-bw/disgoslash/discord"

	mock "github.com/stretchr/testify/mock"
)

// mockClientInterface is an autogenerated mock type for the clientInterface type
type mockClientInterface struct {
	mock.Mock
}

// create provides a mock function with given fields: guildID, command
func (_m *mockClientInterface) create(guildID string, command *discord.ApplicationCommand) error {
	ret := _m.Called(guildID, command)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *discord.ApplicationCommand) error); ok {
		r0 = rf(guildID, command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// delete provides a mock function with given fields: guildID, commandID
func (_m *mockClientInterface) delete(guildID string, commandID string) error {
	ret := _m.Called(guildID, commandID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, commandID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// list provides a mock function with given fields: guildID
func (_m *mockClientInterface) list(guildID string) ([]*discord.ApplicationCommand, error) {
	ret := _m.Called(guildID)

	var r0 []*discord.ApplicationCommand
	if rf, ok := ret.Get(0).(func(string) []*discord.ApplicationCommand); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*discord.ApplicationCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// request provides a mock function with given fields: method, url, body
func (_m *mockClientInterface) request(method string, url string, body io.Reader) (int, []byte, error) {
	ret := _m.Called(method, url, body)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, io.Reader) int); ok {
		r0 = rf(method, url, body)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func(string, string, io.Reader) []byte); ok {
		r1 = rf(method, url, body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, io.Reader) error); ok {
		r2 = rf(method, url, body)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
